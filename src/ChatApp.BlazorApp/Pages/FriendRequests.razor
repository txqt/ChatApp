@* Components/FriendManagement/FriendRequests.razor *@
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="friend-requests-container">
    <ul class="nav nav-tabs" id="friendRequestsTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "pending" ? "active" : "")"
                    @onclick='() => SetActiveTab("pending")' type="button">
                Lời mời nhận được
                @if (pendingRequests.Any())
                {
                    <span class="badge badge-danger ms-2">@pendingRequests.Count</span>
                }
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "sent" ? "active" : "")"
                    @onclick='() => SetActiveTab("sent")' type="button">
                Lời mời đã gửi
                @if (sentRequests.Any())
                {
                    <span class="badge badge-secondary ms-2">@sentRequests.Count</span>
                }
            </button>
        </li>
    </ul>

    <div class="tab-content mt-3">
        @if (activeTab == "pending")
        {
            <div class="tab-pane fade show active">
                @if (pendingRequests.Any())
                {
                    @foreach (var request in pendingRequests)
                    {
                        <div class="friend-request-card">
                            <div class="user-info">
                                <img src="@(!string.IsNullOrEmpty(request.RequesterAvatar) ? request.RequesterAvatar : "/images/default-avatar.png")"
                                     alt="@request.RequesterDisplayName" class="user-avatar" />
                                <div class="user-details">
                                    <h6>@request.RequesterDisplayName</h6>
                                    <small class="text-muted">@@@request.RequesterName</small>
                                    <div class="request-time">
                                        <small class="text-muted">@request.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                                    </div>
                                </div>
                            </div>
                            <div class="request-actions">
                                <button @onclick="() => AcceptRequest(request.Id)" class="btn btn-success btn-sm me-2">
                                    <i class="fas fa-check"></i> Chấp nhận
                                </button>
                                <button @onclick="() => DeclineRequest(request.Id)" class="btn btn-outline-danger btn-sm">
                                    <i class="fas fa-times"></i> Từ chối
                                </button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="no-requests">
                        <p class="text-muted">Không có lời mời kết bạn nào.</p>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="tab-pane fade show active">
                @if (sentRequests.Any())
                {
                    @foreach (var request in sentRequests)
                    {
                        <div class="friend-request-card">
                            <div class="user-info">
                                <img src="@(!string.IsNullOrEmpty(request.RequesterAvatar) ? request.RequesterAvatar : "/images/default-avatar.png")"
                                     alt="@request.RequesterDisplayName" class="user-avatar" />
                                <div class="user-details">
                                    <h6>@request.RequesterDisplayName</h6>
                                    <small class="text-muted">@@@request.RequesterName</small>
                                    <div class="request-time">
                                        <small class="text-muted">Đã gửi: @request.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                                    </div>
                                </div>
                            </div>
                            <div class="request-actions">
                                <span class="badge badge-warning">Đang chờ</span>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="no-requests">
                        <p class="text-muted">Bạn chưa gửi lời mời kết bạn nào.</p>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public EventCallback OnRequestsChanged { get; set; }

    private string activeTab = "pending";
    private List<FriendRequestDto> pendingRequests = new();
    private List<FriendRequestDto> sentRequests = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadRequests();
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private async Task LoadRequests()
    {
        try
        {
            // Load pending requests
            var pendingResponse = await Http.GetAsync("api/friends/requests/pending");
            if (pendingResponse.IsSuccessStatusCode)
            {
                pendingRequests = await pendingResponse.Content.ReadFromJsonAsync<List<FriendRequestDto>>() ?? new();
            }

            // Load sent requests
            var sentResponse = await Http.GetAsync("api/friends/requests/sent");
            if (sentResponse.IsSuccessStatusCode)
            {
                sentRequests = await sentResponse.Content.ReadFromJsonAsync<List<FriendRequestDto>>() ?? new();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading friend requests: {ex.Message}");
        }
    }

    private async Task AcceptRequest(string requestId)
    {
        try
        {
            var response = await Http.PostAsync($"api/friends/accept-request/{requestId}", null);
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Đã chấp nhận lời mời kết bạn!");
                await LoadRequests();
                await OnRequestsChanged.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error accepting friend request: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Có lỗi xảy ra khi chấp nhận lời mời.");
        }
    }

    private async Task DeclineRequest(string requestId)
    {
        try
        {
            var response = await Http.PostAsync($"api/friends/decline-request/{requestId}", null);
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Đã từ chối lời mời kết bạn!");
                await LoadRequests();
                await OnRequestsChanged.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error declining friend request: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Có lỗi xảy ra khi từ chối lời mời.");
        }
    }

    public async Task RefreshRequests()
    {
        await LoadRequests();
    }
}