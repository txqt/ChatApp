@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@inject HttpClient Http
@inject IJSRuntime JSRuntime

    <MudGrid Class="align-content-center" Justify="Justify.SpaceBetween" >
        <MudItem>
            <MudText Typo="Typo.h6">Danh sách bạn bè (@friends.Count)</MudText>
        </MudItem>
        <MudItem>
            <MudButton Variant="Variant.Outlined"
                       Size="Size.Small"
                       StartIcon="@Icons.Material.Filled.Refresh"
                       OnClick="LoadFriends">
                Làm mới
            </MudButton>
        </MudItem>
    </MudGrid>

    @if (isLoading)
    {
        <div class="d-flex justify-center mt-6">
            <MudProgressCircular Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (friends.Any())
    {
        <MudGrid GutterSize="3" Class="mt-4">
            @foreach (var friend in friends)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="3" Class="d-flex justify-center">
                                    <MudAvatar Size="Size.Medium"
                                               Image="@GetAvatar(friend.Avatar)"
                                               Icon="@Icons.Material.Filled.Person" />
                                </MudItem>
                                <MudItem xs="9">
                                    <MudText Typo="Typo.subtitle1">@friend.DisplayName</MudText>
                                    <MudText Typo="Typo.caption" Class="text-muted">
                                        @($"@{friend.UserName}")
                                    </MudText>
                                    <MudText Typo="Typo.body2" Class="mt-1">
                                        @if (friend.IsOnline)
                                        {
                                            <MudBadge Dot="true" Color="Color.Success" Class="me-1">Online</MudBadge>
                                            
                                        }
                                        else
                                        {
                                            <MudBadge Dot="true" Color="Color.Default" Class="me-1" />
                                            @friend.LastSeen?.ToString("dd/MM HH:mm")
                                        }
                                    </MudText>
                                    <MudText Typo="Typo.caption" Class="text-muted">
                                        Bạn bè từ: @friend.FriendsSince.ToString("dd/MM/yyyy")
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions Class="justify-space-between">
                            <MudButton Variant="Variant.Filled"
                                       Size="Size.Small"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Chat"
                                       OnClick="() => StartChat(friend.Id)">
                                Chat
                            </MudButton>
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                                <MudMenuItem OnClick="() => RemoveFriend(friend.Id)">
                                    <MudIcon Icon="@Icons.Material.Filled.PersonRemove" Class="me-1" />
                                    Xóa bạn bè
                                </MudMenuItem>
                                <MudMenuItem OnClick="() => BlockUser(friend.Id)">
                                    <MudIcon Icon="@Icons.Material.Filled.Block" Class="me-1" />
                                    Chặn
                                </MudMenuItem>
                            </MudMenu>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <div class="text-center mt-8">
            <MudIcon Icon="@Icons.Material.Filled.PersonOff" Size="Size.Large" Class="text-muted mb-2" />
            <MudText Typo="Typo.body2" Class="text-muted">
                Bạn chưa có bạn bè nào.<br />
                Hãy tìm kiếm và kết bạn với những người bạn biết!
            </MudText>
        </div>
    }

@code {
    [Parameter] public EventCallback<string> OnStartChat { get; set; }
    [Parameter] public EventCallback OnFriendsChanged { get; set; }

    private List<FriendDto> friends = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadFriends();
    }

    private async Task LoadFriends()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await Http.GetAsync("api/friends/list");
            if (response.IsSuccessStatusCode)
                friends = await response.Content.ReadFromJsonAsync<List<FriendDto>>() ?? new();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading friends: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Có lỗi xảy ra khi tải danh sách bạn bè.");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task StartChat(string friendId)
    {
        await OnStartChat.InvokeAsync(friendId);
    }

    private async Task RemoveFriend(string friendId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa bạn bè này?"))
        {
            try
            {
                var response = await Http.DeleteAsync($"api/friends/remove/{friendId}");
                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Đã xóa bạn bè thành công!");
                    await LoadFriends();
                    await OnFriendsChanged.InvokeAsync();
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error removing friend: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", "Có lỗi xảy ra khi xóa bạn bè.");
            }
        }
    }

    private async Task BlockUser(string userId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn chặn người dùng này?"))
        {
            try
            {
                var response = await Http.PostAsync($"api/friends/block/{userId}", null);
                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Đã chặn người dùng thành công!");
                    await LoadFriends();
                    await OnFriendsChanged.InvokeAsync();
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error blocking user: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", "Có lỗi xảy ra khi chặn người dùng.");
            }
        }
    }

    public async Task RefreshFriends() => await LoadFriends();

    private string GetAvatar(string? url) =>
        !string.IsNullOrEmpty(url) ? url : "/images/default-avatar.png";
}
