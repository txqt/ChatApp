@page "/chat"
@inject IChatService ChatService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@implements IAsyncDisposable
@implements IDisposable
@attribute [Authorize]
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IScrollManager ScrollManager
@inject SignOutSessionStateManager SignOutManager

<MudContainer MaxWidth="MaxWidth.False" Class="pa-0" Style="height: 100vh;">
    @if (!ChatService.IsConnected)
    {
        <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Class="ma-2">
            <MudIcon Icon="Icons.Material.Filled.Warning" Class="mr-2" />
            Đã mất kết nối với hệ thống, đang cố gắng kết nối lại…
        </MudAlert>
    }

    <MudGrid Style="height: 100vh;" Spacing="0">
        <!-- Sidebar -->
        <MudItem xs="12" sm="3" md="2" Class="d-flex flex-column" Style="border-right: 1px solid var(--mud-palette-divider);">
            <MudPaper Elevation="0" Class="flex-grow-1 d-flex flex-column">
                <!-- Header -->
                <MudToolBar Dense="true" Class="px-4">
                    <MudText Typo="Typo.h6">Chats</MudText>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Add"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   OnClick="ShowNewChatModal">
                    </MudIconButton>
                </MudToolBar>

                <!-- Search -->
                <MudPaper Class="pa-2" Elevation="0">
                    <MudTextField @bind-Value="searchQuery"
                                  @oninput="OnSearchInput"
                                  Placeholder="Search chats..."
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense" />
                </MudPaper>

                @if (isLoadingChats)
                {
                    <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
                        @for (int i = 0; i < 5; i++)
                        {
                            <MudSkeleton Height="80px" Width="100%" Class="mb-2" />
                        }
                    </div>
                }
                else
                {
                    <Virtualize Items="@filteredChats" Context="chat">
                        <MudPaper Class="@($"pa-3 cursor-pointer {(IsChatSelected(chat) ? "mud-theme-primary" : "")}")"
                                  Elevation="0"
                                  @onclick="() => SelectChat(chat)"
                                  Style="border-bottom: 1px solid var(--mud-palette-divider);">
                            <ChatListItem Chat="chat" CurrentUserId="currentUserId" />
                        </MudPaper>
                    </Virtualize>
                }

                <!-- Sidebar Menu -->
                <MudDivider />
                <MudList T="string">
                    <MudListItem Icon="Icons.Material.Filled.Person" OnClick="ShowProfile">
                        Profile
                    </MudListItem>
                    <MudListItem Icon="Icons.Material.Filled.Logout" OnClick="Logout">
                        Logout
                    </MudListItem>
                </MudList>
            </MudPaper>
        </MudItem>

        <!-- Main Chat Area -->
        <MudItem xs="12" sm="8" md="9" Class="d-flex flex-column">
            @if (selectedChat != null)
            {
                <MudPaper Class="d-flex flex-column" Style="height: 100vh;" Square="true" Elevation="0">
                    <!-- Chat Header -->
                    <MudToolBar Dense="false" Class="px-4">
                        <div class="position-relative mr-3">
                            @if (!string.IsNullOrEmpty(selectedChat.AvatarUrl))
                            {
                                <MudAvatar Size="Size.Medium">
                                    <MudImage Src="@selectedChat.AvatarUrl" Alt="@selectedChat.ChatName" />
                                </MudAvatar>
                            }
                            else
                            {
                                <MudAvatar Color="Color.Primary" Size="Size.Medium">
                                    @(selectedChat.ChatType == ChatType.Direct
                                        ? GetDirectChatInitial(selectedChat)
                                        : selectedChat.ChatName?.Substring(0, 1))
                                </MudAvatar>
                            }
                        </div>

                        <div>
                            <MudText Typo="Typo.h6">
                                @(selectedChat.ChatType == ChatType.Direct ? GetDirectChatName(selectedChat) : selectedChat.ChatName)
                            </MudText>
                            <MudText Typo="Typo.body2">
                                @if (selectedChat.ChatType == ChatType.Group)
                                {
                                    <span>@selectedChat.Members.Count members</span>
                                }
                                else
                                {
                                    var otherUser = selectedChat.Members.FirstOrDefault(u => u.Id != currentUserId);
                                    if (otherUser != null)
                                    {
                                        @if (otherUser.IsOnline)
                                        {
                                            <span class="d-flex align-center">
                                                <MudIcon Icon="@Icons.Material.Filled.Circle"
                                                         Color="Color.Success"
                                                         Size="Size.Small"
                                                         Class="mr-1" />Online
                                            </span>
                                        }
                                        else if (otherUser.LastSeenAt.HasValue)
                                        {
                                            <span>Last seen @GetRelativeTime(otherUser.LastSeenAt.Value)</span>
                                        }
                                    }
                                }
                            </MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Settings"
                                           Color="Color.Primary"
                                           Size="Size.Small"
                                           OnClick="ShowChatSettings">
                            </MudIconButton>
                        </div>
                    </MudToolBar>

                    <!-- Messages Area -->
                    <MudPaper Class="flex-grow-1 overflow-y-auto pa-4"
                              Elevation="0"
                              Square="true"
                              Style="background-color: var(--mud-palette-background-grey);"
                              id="chat-container">

                        @if (isLoadingMessages)
                        {
                            @* Skeleton loading *@
                            @for (int i = 0; i < 5; i++)
                            {
                                <div class="d-flex mb-3 @(/* giả sử luôn justify-start cho loading */"justify-start")">
                                    <MudSkeleton Height="80px" Width="100%" Class="mb-2" />
                                </div>
                            }
                        }
                        else if (messages?.Any() == true)
                        {
                            <Virtualize Items="messages" Context="msg" ItemSize="100">
                                <ItemContent>
                                    <MessageItem
                                        Message="msg"
                                        CurrentUserId="currentUserId"
                                        OnMessagePreview="GetMessagePreview" />
                                </ItemContent>
                            </Virtualize>
                        }
                        else
                        {
                            <div class="d-flex justify-center align-center flex-grow-1">
                                <MudText Typo="Typo.h6">No messages yet</MudText>
                            </div>
                        }

                        @if (typingUsers.TryGetValue(selectedChat.ChatId, out var typingUser))
                        {
                            <div class="d-flex justify-start mb-3">
                                <MudPaper Class="pa-3" Elevation="1" Style="border-radius: 18px;">
                                    <div class="d-flex align-center">
                                        <div class="typing-dots mr-2">
                                            <span></span>
                                            <span></span>
                                            <span></span>
                                        </div>
                                        <MudText Typo="Typo.body2">@typingUser.DisplayName is typing...</MudText>
                                    </div>
                                </MudPaper>
                            </div>
                        }
                    </MudPaper>


                    <!-- Input Area -->
                    <MudPaper Class="pa-3" Elevation="0" Square="true">
                        <div class="d-flex align-center">
                            <InputFile id="fileInput" OnChange="OnFilesSelected" accept="image/*,application/pdf" multiple Class="mr-2" hidden />
                            <MudMenu Icon="@Icons.Material.Filled.Add" Color="Color.Primary" AriaLabel="Open user menu">
                                <MudMenuItem OnClick="@(() => OpenFileUpload())">
                                    Upload Files
                                </MudMenuItem>
                            </MudMenu>
                            <MudTextField @ref="InputRef"
                                          T="string"
                                          @bind-Value="messageInput"
                                          Immediate="true"
                                          TextUpdateSuppression="false"
                                          OnKeyDown="HandleKeyDown"
                                          Placeholder="Type a message..."
                                          Variant="Variant.Outlined"
                                          Margin="Margin.Dense"
                                          Class="flex-grow-1 mr-2"
                                          Style="border-radius: 20px;"
                                          For="@(() => messageInput)" Disabled="@(!selectedChat.Permissions.HasFlag(ChatPermissions.SendMessages))" />

                            <MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos"
                                           Color="Color.Primary"
                                           Variant="Variant.Filled"
                                           Size="Size.Medium"
                                           OnClick="SendMessage"
                                           Disabled="@(string.IsNullOrWhiteSpace(messageInput) | selectedFiles == null | !selectedChat.Permissions.HasFlag(ChatPermissions.SendMessages))" />
                        </div>
                        @if (previewUrls.Any())
                        {
                            <div class="d-flex flex-wrap mt-2">
                                @foreach (var url in previewUrls)
                                {
                                    <div class="mr-2 mb-2">
                                        <MudImage Src="@url"
                                                  Style="max-width:100px; max-height:100px; border-radius:4px;" />
                                    </div>
                                }
                                <MudIconButton Icon="@Icons.Material.Filled.Close"
                                               OnClick="ClearFiles"
                                               Color="Color.Error" Size="Size.Small" />
                            </div>
                        }

                    </MudPaper>
                </MudPaper>
            }
            else
            {
                <div class="d-flex justify-center align-center flex-grow-1">
                    <MudText Typo="Typo.h6">Select a chat to start messaging</MudText>
                </div>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<ChatDto> allChats = new();
    private List<ChatDto> filteredChats = new();
    private ChatDto? selectedChat;
    private List<MessageDto> messages = new();
    private Dictionary<int, TypingUser> typingUsers = new();
    private string searchQuery = string.Empty;
    private string messageInput = string.Empty;
    private string currentUserId = "";
    private ElementReference messagesDivRef;
    private Timer? typingTimer;
    private MudTextField<string> InputRef;
    private MudPaper ChatRef;
    private bool _shouldScroll;
    private List<IBrowserFile> selectedFiles = new();
    private List<string> previewUrls = new();
    private bool isLoadingChats = true;
    private bool isLoadingMessages = true;
    private bool isSendingMessage = false;
    private Timer? searchDebounceTimer;
    private const int SearchDebounceTime = 300; // ms

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            currentUserId = user.GetUserId();

            ChatService.OnMessageReceived += OnMessageReceived;
            ChatService.OnUserTyping += OnUserTypingReceived;
            ChatService.OnUserStoppedTyping += OnUserStoppedTyping;
            ChatService.OnMessageRead += OnMessageRead;
            ChatService.OnUserOnlineStatusChanged += HandleUserOnlineStatusChanged;
            ChatService.OnConnectionStateChanged += HandleConnectionStateChanged;

            await ChatService.StartConnectionAsync();
            await JSRuntime.InvokeVoidAsync("signalRAddBeforeUnload", DotNetObjectReference.Create(this));

            allChats = await ChatService.GetUserChatsAsync();
            filteredChats = allChats;
            isLoadingChats = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to initialize chat: {ex.Message}", Severity.Error);
            isLoadingChats = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldScroll)
        {
            _shouldScroll = false;
            await Task.Delay(50);
            await ScrollToBottom();
        }
    }

    protected override bool ShouldRender()
    {
        // Only re-render if there are actual changes to the state
        return true;
    }

    [JSInvokable]
    public async Task OnBrowserUnload()
    {
        await ChatService.StopConnectionAsync();
    }

    private async void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        
        // Debounce the search
        searchDebounceTimer?.Dispose();
        searchDebounceTimer = new Timer(async _ => 
        {
            await InvokeAsync(() =>
            {
                filteredChats = allChats
                    .Where(c => (c.ChatName ?? "").Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                               c.Members.Any(m => m.DisplayName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
                    .OrderByDescending(c => c.UpdatedAt)
                    .ToList();
                StateHasChanged();
            });
        }, null, SearchDebounceTime, Timeout.Infinite);
    }

    private bool IsChatSelected(ChatDto chat) => selectedChat?.ChatId == chat.ChatId;

    private async Task SelectChat(ChatDto chat)
    {
        try
        {
            selectedChat = chat;
            isLoadingMessages = true;
            StateHasChanged();

            messages = await ChatService.GetChatMessagesAsync(chat.ChatId);
            if (messages is not null)
            {
                messages = messages
                    .Select(msg =>
                    {
                        msg.IsFromCurrentUser = msg.Sender.Id == currentUserId;
                        return msg;
                    })
                    .ToList();
            }

            if (chat.LastMessage != null)
            {
                await ChatService.MarkAsReadAsync(chat.ChatId, chat.LastMessage.MessageId);
            }

            _shouldScroll = true;
            isLoadingMessages = false;
            await InputRef.FocusAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load chat: {ex.Message}", Severity.Error);
            isLoadingMessages = false;
        }
    }

    private async Task SendMessage()
    {
        if (selectedChat == null || !selectedChat.Permissions.HasFlag(ChatPermissions.SendMessages))
        {
            Snackbar.Add("You do not have permission to send messages in this chat.", Severity.Error);
            return;
        }

        if (string.IsNullOrWhiteSpace(messageInput) && !selectedFiles.Any())
        {
            return;
        }

        try
        {
            isSendingMessage = true;
            StateHasChanged();

            using var form = new MultipartFormDataContent();
            form.Add(new StringContent(selectedChat.ChatId.ToString()), "ChatId");
            form.Add(new StringContent(messageInput ?? ""), "Content");

            if (selectedChat.Permissions.HasFlag(ChatPermissions.SendMedia))
            {
                foreach (var file in selectedFiles)
                {
                    try
                    {
                        var streamContent = new StreamContent(file.OpenReadStream(10_000_000));
                        streamContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
                        form.Add(streamContent, "Files", file.Name);
                    }
                    catch (Exception ex)
                    {
                        Snackbar.Add($"Error processing file {file.Name}: {ex.Message}", Severity.Error);
                        continue;
                    }
                }
            }

            var msg = await ChatService.SendMessageAsync(form);
            
            messageInput = string.Empty;
            ClearFiles();
            await InputRef.Clear();
            _shouldScroll = true;
            await ChatService.StopTypingAsync(selectedChat.ChatId);
            await InputRef.FocusAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to send message: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSendingMessage = false;
        }
    }

    private async Task OpenFileUpload()
    {
        if (selectedChat == null || !selectedChat.Permissions.HasFlag(ChatPermissions.SendMedia))
        {
            Snackbar.Add("You do not have permission to upload files in this chat.", Severity.Error);
            return;
        }

        try
        {
            await JSRuntime.InvokeVoidAsync("openFileUpload");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to open file dialog: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        if (selectedChat == null || !selectedChat.Permissions.HasFlag(ChatPermissions.SendMedia))
        {
            Snackbar.Add("You do not have permission to upload files in this chat.", Severity.Error);
            return;
        }

        try
        {
            selectedFiles = e.GetMultipleFiles(maximumFileCount: 10).ToList();
            previewUrls = new List<string>();

            foreach (var file in selectedFiles)
            {
                try
                {
                    using var stream = file.OpenReadStream(10_000_000);
                    var buffer = new byte[file.Size];
                    await stream.ReadAsync(buffer);
                    previewUrls.Add($"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}");
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Error processing file {file.Name}: {ex.Message}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error selecting files: {ex.Message}", Severity.Error);
        }
    }

    private void RemovePreview(string url)
    {
        var index = previewUrls.IndexOf(url);
        if (index >= 0)
        {
            previewUrls.RemoveAt(index);
            if (index < selectedFiles.Count)
            {
                selectedFiles.RemoveAt(index);
            }
        }
    }

    private void ClearFiles()
    {
        selectedFiles.Clear();
        previewUrls.Clear();
    }

    private async void OnTyping(ChangeEventArgs e)
    {
        if (selectedChat == null || !selectedChat.Permissions.HasFlag(ChatPermissions.SendMessages))
        {
            return;
        }

        try
        {
            await ChatService.StartTypingAsync(selectedChat.ChatId);
            typingTimer?.Dispose();
            typingTimer = new Timer(async _ =>
            {
                await ChatService.StopTypingAsync(selectedChat.ChatId);
                typingTimer?.Dispose();
            }, null, 2000, Timeout.Infinite);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling typing: {ex.Message}");
        }
    }

    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async void OnMessageReceived(MessageDto message)
    {
        try
        {
            if (selectedChat == null || !selectedChat.Permissions.HasFlag(ChatPermissions.ViewMessages))
            {
                return;
            }

            if (selectedChat?.ChatId == message.ChatId)
            {
                message.IsFromCurrentUser = message.Sender.Id == currentUserId;
                messages.Add(message);
                _shouldScroll = true;
                await InvokeAsync(StateHasChanged);
            }

            var chat = allChats.FirstOrDefault(c => c.ChatId == message.ChatId);
            if (chat != null)
            {
                chat.LastMessage = message;
                chat.UpdatedAt = message.CreatedAt;

                if (chat.ChatId != selectedChat?.ChatId)
                {
                    chat.UnreadCount++;
                }

                allChats = allChats.OrderByDescending(c => c.UpdatedAt).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing received message: {ex.Message}");
        }
    }

    private void OnUserTypingReceived(int chatId, string displayName)
    {
        if (selectedChat?.ChatId == chatId)
        {
            typingUsers[chatId] = new TypingUser
            {
                DisplayName = displayName,
                StartTime = DateTime.Now
            };
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnUserStoppedTyping(int chatId)
    {
        typingUsers.Remove(chatId);
        InvokeAsync(StateHasChanged);
    }

    private void HandleUserOnlineStatusChanged(string userId, bool isOnline)
    {
        foreach (var chat in allChats)
        {
            var member = chat.Members.FirstOrDefault(m => m.Id == userId);
            if (member != null)
            {
                member.IsOnline = isOnline;
            }
        }
        InvokeAsync(StateHasChanged);
    }

    private void HandleConnectionStateChanged(bool isConnected)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnMessageRead(int messageId, int readBy, DateTime readAt)
    {
        var message = messages.FirstOrDefault(m => m.MessageId == messageId);
        if (message != null)
        {
            // Update read status logic here
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-container");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Scroll error: {ex.Message}");
            try
            {
                await Task.Delay(100);
                await JSRuntime.InvokeVoidAsync("scrollToBottomFallback", "chat-container");
            }
            catch
            {
                // Ignore fallback errors
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        await Dispose(true);
        GC.SuppressFinalize(this);
    }

    public void Dispose()
    {
        DisposeAsync().ConfigureAwait(false).GetAwaiter().GetResult();
    }

    private async ValueTask Dispose(bool disposing)
    {
        if (disposing)
        {
            ChatService.OnMessageReceived -= OnMessageReceived;
            ChatService.OnUserTyping -= OnUserTypingReceived;
            ChatService.OnUserStoppedTyping -= OnUserStoppedTyping;
            ChatService.OnMessageRead -= OnMessageRead;
            ChatService.OnUserOnlineStatusChanged -= HandleUserOnlineStatusChanged;
            ChatService.OnConnectionStateChanged -= HandleConnectionStateChanged;

            typingTimer?.Dispose();
            searchDebounceTimer?.Dispose();
            await ChatService.StopConnectionAsync();

            // Clear file references
            ClearFiles();
        }
    }

    private string GetMessagePreview(MessageDto msg) =>
        msg.IsDeleted ? "[Deleted]" :
        msg.Content.Length > 30 ? msg.Content[..30] + "..." : msg.Content;

    private string GetDirectChatName(ChatDto chat) =>
        chat.Members.FirstOrDefault(m => m.Id != currentUserId)?.DisplayName ?? "Unknown";

    private string GetDirectChatInitial(ChatDto chat) =>
        GetDirectChatName(chat)?.FirstOrDefault().ToString().ToUpper() ?? "?";

    private string GetRelativeTime(DateTime dateTime)
    {
        var diff = DateTime.Now - dateTime;

        if (diff.TotalMinutes < 1)
            return "just now";
        if (diff.TotalMinutes < 60)
            return $"{(int)diff.TotalMinutes}m ago";
        if (diff.TotalHours < 24)
            return $"{(int)diff.TotalHours}h ago";
        if (diff.TotalDays < 7)
            return $"{(int)diff.TotalDays}d ago";

        return dateTime.ToString("MMM dd");
    }

    async Task ShowNewChatModal()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.False };
        var dialog = DialogService.Show<NewChatModal>("New Group", options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is CreateGroupChatRequest info)
        {
            await CreateGroupChat(info);
        }
    }

    async Task ShowChatSettings()
    {
        if (selectedChat == null)
        {
            Snackbar.Add("Please select a chat first.", Severity.Warning);
            return;
        }
        var parameters = new DialogParameters
        {
            ["Chat"] = selectedChat,
            ["CurrentUserId"] = currentUserId
        };

        var dialog = DialogService.Show<ChatSettingsDialog>("Cài đặt Chat", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is ChatDto updated)
        {
            var idx = allChats.FindIndex(x => x.ChatId == updated.ChatId);
            if (idx >= 0)
                allChats[idx] = updated;
        }
    }

    async Task ShowProfile()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large };
        await DialogService.ShowAsync<Profile>("My Profile", options);
    }

    private async Task CreateGroupChat(CreateGroupChatRequest createGroupChatRequest)
    {
        try
        {
            await ChatService.CreateGroupChatAsync(createGroupChatRequest);
            allChats = await ChatService.GetUserChatsAsync();
            filteredChats = allChats;
            Snackbar.Add("Group chat created successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create group chat: {ex.Message}", Severity.Error);
        }
    }

    private async Task Logout()
    {
        await SignOutManager.SetSignOutState();
        NavigationManager.NavigateTo("/authentication/logout");
    }
}