@page "/chat"
@using System.Net.Http.Headers
@inject IChatService ChatService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@implements IAsyncDisposable
@attribute [Authorize]
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IScrollManager ScrollManager

<MudContainer MaxWidth="MaxWidth.False" Class="pa-0" Style="height: 100vh;">
    @if (!ChatService.IsConnected)
    {
        <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Class="ma-2">
            <MudIcon Icon="Icons.Material.Filled.Warning" Class="mr-2" />
            Đã mất kết nối với hệ thống, đang cố gắng kết nối lại…
        </MudAlert>
    }

    <MudGrid Style="height: 100vh;" Spacing="0">
        <!-- Sidebar -->
        <MudItem xs="12" sm="3" md="2" Class="d-flex flex-column" Style="border-right: 1px solid var(--mud-palette-divider);">
            <MudPaper Elevation="0" Class="flex-grow-1 d-flex flex-column">
                <!-- Header -->
                <MudToolBar Dense="true" Class="px-4">
                    <MudText Typo="Typo.h6">Chats</MudText>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Add"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   OnClick="ShowNewChatModal">
                    </MudIconButton>
                </MudToolBar>

                <!-- Search -->
                <MudPaper Class="pa-2" Elevation="0">
                    <MudTextField @bind-Value="searchQuery"
                                  @oninput="FilterChats"
                                  Placeholder="Search chats..."
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense" />
                </MudPaper>

                <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
                    <MudList Clickable="true" T="string">
                        @if (filteredChats?.Any() == true)
                        {
                            @foreach (var chat in filteredChats)
                            {
                                var otherUser = chat.ChatType == ChatType.Direct
                                ? chat.Members.FirstOrDefault(u => u.Id != currentUserId)
                                : null;
                                var isSelected = selectedChat?.ChatId == chat.ChatId;

                                <MudPaper Class="@($"pa-3 cursor-pointer {(isSelected ? "mud-theme-primary" : "")}")"
                                          Elevation="0"
                                          @onclick="() => SelectChat(chat)"
                                          Style="border-bottom: 1px solid var(--mud-palette-divider);">
                                    <div class="d-flex align-center">
                                        <div class="position-relative mr-3">
                                            @if (!string.IsNullOrEmpty(chat.AvatarUrl))
                                            {
                                                <MudAvatar Size="Size.Medium">
                                                    <MudImage Src="@chat.AvatarUrl" Alt="@chat.ChatName" />
                                                </MudAvatar>
                                            }
                                            else if (otherUser != null && !string.IsNullOrEmpty(otherUser.AvatarUrl))
                                            {
                                                <MudAvatar Size="Size.Medium">
                                                    <MudImage Src="@otherUser.AvatarUrl" Alt="@otherUser.DisplayName" />
                                                </MudAvatar>
                                            }
                                            else
                                            {
                                                <MudAvatar Color="Color.Primary" Size="Size.Medium">
                                                    @(chat.ChatType == ChatType.Direct
                                                                                            ? GetDirectChatInitial(chat)
                                                                                            : chat.ChatName?.Substring(0, 1))
                                    </MudAvatar>
                                                                        }

                                            @if (chat.ChatType == ChatType.Direct && otherUser?.IsOnline == true)
                                            {
                                                <MudIcon Icon="Icons.Material.Filled.Circle"
                                                         Color="Color.Success"
                                                         Size="Size.Small"
                                                         Style="position: absolute; bottom: 0; right: 0;" />
                                            }
                                        </div>

                                        <div class="flex-grow-1 min-width-0">
                                            <div class="d-flex justify-space-between align-center">
                                                <MudText Typo="Typo.subtitle2" Class="text-truncate">
                                                    @(chat.ChatType == ChatType.Direct ? GetDirectChatName(chat) : chat.ChatName)
                                                </MudText>
                                                <MudText Typo="Typo.caption">
                                                    @GetRelativeTime(chat.UpdatedAt)
                                                </MudText>
                                            </div>

                                            <div class="d-flex align-center">
                                                <MudText Typo="Typo.body2" Class="text-truncate flex-grow-1">
                                                    @if (chat.LastMessage != null)
                                                    {
                                                        if (chat.LastMessage.IsDeleted)
                                                        {
                                                            <em>Message deleted</em>
                                                        }
                                                        else
                                                        {
                                                            <span>@chat.LastMessage.Sender.DisplayName: </span>
                                                            @if (chat.LastMessage.MessageType == MessageType.Image)
                                                            {
                                                                <MudIcon Icon="Icons.Material.Filled.Image" Size="Size.Small" />
                                                                <span>Image</span>
                                                            }
                                                            else if (chat.LastMessage.MessageType == MessageType.Text)
                                                            {
                                                                @GetMessagePreview(chat.LastMessage)
                                                            }
                                                            else
                                                            {
                                                                <MudIcon Icon="Icons.Material.Filled.AttachFile" Size="Size.Small" />
                                                                <span>File</span>
                                                            }
                                                        }
                                                    }
                                                </MudText>

                                                <div class="d-flex align-center ml-2">
                                                    @if (chat.UnreadCount > 0)
                                                    {
                                                        <MudChip T="string" Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" Class="pa-1">
                                                            @chat.UnreadCount
                                                        </MudChip>
                                                    }
                                                    @if (chat.IsMuted)
                                                    {
                                                        <MudIcon Icon="Icons.Material.Filled.VolumeOff"
                                                                 Size="Size.Small"
                                                                 Class="ml-1" />
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </MudPaper>
                            }
                        }
                        else
                        {
                            <div class="d-flex justify-center align-center pa-4">
                                <MudText>No chats found</MudText>
                            </div>
                        }
                    </MudList>
                </div>

                <!-- Sidebar Menu -->
                <MudDivider />
                <MudList T="string">
                    <MudListItem Icon="Icons.Material.Filled.Person" OnClick="ShowProfile">
                        Profile
                    </MudListItem>
                    <MudListItem Icon="Icons.Material.Filled.Logout" OnClick="Logout">
                        Logout
                    </MudListItem>
                </MudList>
            </MudPaper>
        </MudItem>

        <!-- Main Chat Area -->
        <MudItem xs="12" sm="8" md="9" Class="d-flex flex-column">
            @if (selectedChat != null)
            {
                <MudPaper Class="d-flex flex-column" Style="height: 100vh;" Square="true" Elevation="0">
                    <!-- Chat Header -->
                    <MudToolBar Dense="false" Class="px-4">
                        <div class="position-relative mr-3">
                            @if (!string.IsNullOrEmpty(selectedChat.AvatarUrl))
                            {
                                <MudAvatar Size="Size.Medium">
                                    <MudImage Src="@selectedChat.AvatarUrl" Alt="@selectedChat.ChatName" />
                                </MudAvatar>
                            }
                            else
                            {
                                <MudAvatar Color="Color.Primary" Size="Size.Medium">
                                    @(selectedChat.ChatType == ChatType.Direct
                                                                ? GetDirectChatInitial(selectedChat)
                                                                : selectedChat.ChatName?.Substring(0, 1))
                        </MudAvatar>
                                                }
                        </div>

                        <div>
                            <MudText Typo="Typo.h6">
                                @(selectedChat.ChatType == ChatType.Direct ? GetDirectChatName(selectedChat) : selectedChat.ChatName)
                            </MudText>
                            <MudText Typo="Typo.body2">
                                @if (selectedChat.ChatType == ChatType.Group)
                                {
                                    <span>@selectedChat.Members.Count members</span>
                                }
                                else
                                {
                                    var otherUser = selectedChat.Members.FirstOrDefault(u => u.Id != currentUserId);
                                    if (otherUser != null)
                                    {
                                        @if (otherUser.IsOnline)
                                        {
                                            <span class="d-flex align-center">
                                                <MudIcon Icon="@Icons.Material.Filled.Circle"
                                                         Color="Color.Success"
                                                         Size="Size.Small"
                                                         Class="mr-1" />Online
                                            </span>
                                        }
                                        else if (otherUser.LastSeenAt.HasValue)
                                        {
                                            <span>Last seen @GetRelativeTime(otherUser.LastSeenAt.Value)</span>
                                        }
                                    }
                                }
                            </MudText>
                        </div>
                    </MudToolBar>

                    <!-- Messages Area -->
                    <MudPaper Class="flex-grow-1 overflow-y-auto pa-4"
                              Elevation="0"
                              Square="true"
                              Style="background-color: var(--mud-palette-background-grey);" id="chat-container">
                        @if (messages?.Any() == true)
                        {
                            @foreach (var msg in messages)
                            {
                                <MudMenu Class="d-block align-self-auto"
                                         ActivationEvent="@MouseEvent.RightClick"
                                         PositionAtCursor="true">
                                    <ActivatorContent>
                                        <div class="@($"d-flex mb-3 {(msg.IsFromCurrentUser ? "justify-end" : "justify-start")}")">
                                            <MudPaper Class="@($"pa-3 {(msg.IsFromCurrentUser ? "mud-theme-primary" : "")}")"
                                                      Style="@($"max-width: 70%; border-radius: 18px; {(msg.IsFromCurrentUser ? "border-bottom-right-radius: 5px;" : "border-bottom-left-radius: 5px;")}")"
                                                      Elevation="1">

                                                @if (msg.ReplyTo != null && !msg.ReplyTo.IsDeleted)
                                                {
                                                    <MudPaper Class="pa-2 mb-2"
                                                              Elevation="0"
                                                              Style="background-color: var(--mud-palette-background-grey); border-left: 3px solid var(--mud-palette-primary);">
                                                        <MudText Typo="Typo.caption" Color="Color.Primary">@msg.ReplyTo.Sender.DisplayName</MudText>
                                                        <MudText Typo="Typo.body2">
                                                            @if (msg.ReplyTo.MessageType == MessageType.Image)
                                                            {
                                                                <MudIcon Icon="@Icons.Material.Filled.Image" Size="Size.Small" />
                                                                <span>Image</span>
                                                            }
                                                            else if (msg.ReplyTo.MessageType == MessageType.Text)
                                                            {
                                                                @GetMessagePreview(msg.ReplyTo)
                                                            }
                                                            else
                                                            {
                                                                <MudIcon Icon="@Icons.Material.Filled.AttachFile" Size="Size.Small" />
                                                                <span>File</span>
                                                            }
                                                        </MudText>
                                                    </MudPaper>
                                                }

                                                <div>
                                                    @if (msg.IsDeleted)
                                                    {
                                                        <MudText Typo="Typo.body2">
                                                            <em>Message deleted</em>
                                                        </MudText>
                                                    }
                                                    else if (msg.MediaFiles != null)
                                                    {
                                                        foreach (var mediaFile in msg.MediaFiles)
                                                        {
                                                            @if (msg.MessageType == MessageType.Image)
                                                            {
                                                                <MudImage Src="@mediaFile.FilePath"
                                                                          Alt="Uploaded image"
                                                                          Style="max-width: 250px; max-height: 250px; border-radius: 10px;" />
                                                            }
                                                            else
                                                            {
                                                                var category = mediaFile.ContentType switch
                                                                {
                                                                    var ct when ct.StartsWith("image/") => "images",
                                                                    var ct when ct.StartsWith("video/") => "videos",
                                                                    var ct when ct.StartsWith("audio/") => "audios",
                                                                    _ => "others"
                                                                };
                                                                if (category == "images")
                                                                {
                                                                    <MudImage Src="@mediaFile.FilePath"
                                                                              Alt="Uploaded image"
                                                                              Style="max-width: 250px; max-height: 250px; border-radius: 10px;" />
                                                                }
                                                                else
                                                                {
                                                                    <MudLink Href="@mediaFile.FilePath" Color="@Color.Warning" Target="_blank" Class="d-flex align-center">
                                                                        <MudIcon Icon="Icons.Material.Filled.AttachFile" Class="mr-2" />
                                                                        @mediaFile.OriginalFileName
                                                                    </MudLink>
                                                                }
                                                            }
                                                        }
                                                    }
                                                    <MudText Typo="Typo.body1">@msg.Content</MudText>
                                                </div>

                                                <div class="d-flex justify-end align-center mt-2">
                                                    <MudText Typo="Typo.caption" Class="mr-1">
                                                        @msg.CreatedAt.ToString("HH:mm")
                                                    </MudText>
                                                    @if (msg.IsEdited && !msg.IsDeleted)
                                                    {
                                                        <MudText Typo="Typo.caption">
                                                            <em>(edited)</em>
                                                        </MudText>
                                                    }
                                                </div>
                                            </MudPaper>
                                        </div>
                                    </ActivatorContent>
                                </MudMenu>
                            }
                        }


                        @if (typingUsers.TryGetValue(selectedChat.ChatId, out var typingUser))
                        {
                            <div class="d-flex justify-start mb-3">
                                <MudPaper Class="pa-3" Elevation="1" Style="border-radius: 18px;">
                                    <div class="d-flex align-center">
                                        <div class="typing-dots mr-2">
                                            <span></span>
                                            <span></span>
                                            <span></span>
                                        </div>
                                        <MudText Typo="Typo.body2">@typingUser.DisplayName is typing...</MudText>
                                    </div>
                                </MudPaper>
                            </div>
                        }
                    </MudPaper>


                    <!-- Input Area -->
                    <MudPaper Class="pa-3" Elevation="0" Square="true">
                        <div class="d-flex align-center">
                            <InputFile id="fileInput" OnChange="OnFilesSelected" accept="image/*,application/pdf" multiple Class="mr-2" hidden />
                            <MudMenu Icon="@Icons.Material.Filled.Add" Color="Color.Primary" AriaLabel="Open user menu">
                                <MudMenuItem OnClick="@(() => OpenFileUpload())">
                                    Upload Files
                                </MudMenuItem>
                            </MudMenu>
                            <MudTextField @ref="InputRef"
                                          T="string"
                                          @bind-Value="messageInput"
                                          Immediate="true"
                                          TextUpdateSuppression="false"
                                          OnKeyDown="HandleKeyDown"
                                          Placeholder="Type a message..."
                                          Variant="Variant.Outlined"
                                          Margin="Margin.Dense"
                                          Class="flex-grow-1 mr-2"
                                          Style="border-radius: 20px;"
                                          For="@(() => messageInput)" />

                            <MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos"
                                           Color="Color.Primary"
                                           Variant="Variant.Filled"
                                           Size="Size.Medium"
                                           OnClick="SendMessage"
                                           Disabled="@(string.IsNullOrWhiteSpace(messageInput) | selectedFiles == null)" />
                        </div>
                        @if (previewUrls.Any())
                        {
                            <div class="d-flex flex-wrap mt-2">
                                @foreach (var url in previewUrls)
                                {
                                    <div class="mr-2 mb-2">
                                        <MudImage Src="@url"
                                                  Style="max-width:100px; max-height:100px; border-radius:4px;" />
                                    </div>
                                }
                                <MudIconButton Icon="@Icons.Material.Filled.Close"
                                               OnClick="ClearFiles"
                                               Color="Color.Error" Size="Size.Small" />
                            </div>
                        }

                    </MudPaper>
                </MudPaper>
            }
            else
            {
                <div class="d-flex justify-center align-center flex-grow-1">
                    <MudText Typo="Typo.h6">Select a chat to start messaging</MudText>
                </div>
            }
        </MudItem>
    </MudGrid>
</MudContainer>
@code {
    private List<ChatDto> allChats = new();
    private List<ChatDto> filteredChats = new();
    private ChatDto? selectedChat;
    private List<MessageDto> messages = new();
    private Dictionary<int, TypingUser> typingUsers = new();
    private string searchQuery = string.Empty;
    private string messageInput = string.Empty;
    private string currentUserId = "";
    private ElementReference messagesDivRef;
    private Timer? typingTimer;
    @inject AuthenticationStateProvider AuthenticationStateProvider
    private MudTextField<string> InputRef;
    private MudPaper ChatRef;
    private bool _shouldScroll;
    private List<IBrowserFile> selectedFiles = new();
    private List<string> previewUrls = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        currentUserId = user.GetUserId();
        ChatService.OnMessageReceived += OnMessageReceived;
        ChatService.OnUserTyping += OnUserTypingReceived;
        ChatService.OnUserStoppedTyping += OnUserStoppedTyping;
        ChatService.OnMessageRead += OnMessageRead;
        ChatService.OnUserOnlineStatusChanged += HandleUserOnlineStatusChanged;
        await ChatService.StartConnectionAsync();

        await JSRuntime.InvokeVoidAsync("signalRAddBeforeUnload",
            DotNetObjectReference.Create(this));
        allChats = await ChatService.GetUserChatsAsync();
        filteredChats = allChats;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldScroll)
        {
            _shouldScroll = false;
            await Task.Delay(50);
            await ScrollToBottom();
        }
    }

    [JSInvokable]
    public async Task OnBrowserUnload()
    {
        // Dừng cầu nối trước khi tab đóng
        await ChatService.StopConnectionAsync();
    }

    private void FilterChats(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        filteredChats = allChats
            .Where(c => (c.ChatName ?? "").Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                       c.Members.Any(m => m.DisplayName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
            .OrderByDescending(c => c.UpdatedAt)
            .ToList();
    }

    private async Task SelectChat(ChatDto chat)
    {
        selectedChat = chat;
        messages = await ChatService.GetChatMessagesAsync(chat.ChatId);
        if (messages is not null)
        {
            messages = messages
                    .Select(msg =>
                    {
                        msg.IsFromCurrentUser = msg.Sender.Id == currentUserId;
                        return msg;
                    })
                    .ToList();
        }
        // Mark messages as read
        if (chat.LastMessage != null)
        {
            await ChatService.MarkAsReadAsync(chat.ChatId, chat.LastMessage.MessageId);
        }
        _shouldScroll = true;
        await InputRef.FocusAsync();
    }

    private async Task SendMessage()
    {
        if (selectedChat == null) return;

        using var form = new MultipartFormDataContent();

        form.Add(new StringContent(selectedChat.ChatId.ToString()), "ChatId");
        form.Add(new StringContent(messageInput ?? ""), "Content");

        // Thêm tất cả file
        foreach (var file in selectedFiles)
        {
            var streamContent = new StreamContent(file.OpenReadStream(10_000_000));
            streamContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            // Tên form field phải trùng với property List<IFormFile> Files
            form.Add(streamContent, "Files", file.Name);
        }

        var msg = await ChatService.SendMessageAsync(form);

        // reset UI
        messageInput = string.Empty;
        ClearFiles();
        await InputRef.Clear();
        _shouldScroll = true;
        await ChatService.StopTypingAsync(selectedChat.ChatId);
        await InputRef.FocusAsync();
    }

    private async Task OpenFileUpload()
    {
        await JSRuntime.InvokeVoidAsync("openFileUpload");
    }

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles(maximumFileCount: 10).ToList();

        // Tạo preview URLs nếu muốn:
        previewUrls = new List<string>();
        foreach (var file in selectedFiles)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream(10_000_000).ReadAsync(buffer);
            previewUrls.Add($"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}");
        }
    }

    private void ClearFiles()
    {
        selectedFiles.Clear();
        previewUrls.Clear();
    }

    private async void OnTyping(ChangeEventArgs e)
    {
        if (selectedChat != null)
        {
            // Start typing indicator
            await ChatService.StartTypingAsync(selectedChat.ChatId);

            // Reset timer
            typingTimer?.Dispose();
            typingTimer = new Timer(async _ =>
            {
                await ChatService.StopTypingAsync(selectedChat.ChatId);
                typingTimer?.Dispose();
            }, null, 2000, Timeout.Infinite);
        }
    }

    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async void OnMessageReceived(MessageDto message)
    {
        if (selectedChat?.ChatId == message.ChatId)
        {
            message.IsFromCurrentUser = message.Sender.Id == currentUserId;
            messages.Add(message);
            StateHasChanged();
            await ScrollToBottom();
        }

        // Update chat list
        var chat = allChats.FirstOrDefault(c => c.ChatId == message.ChatId);
        if (chat != null)
        {
            chat.LastMessage = message;
            chat.UpdatedAt = message.CreatedAt;

            if (chat.ChatId != selectedChat?.ChatId)
            {
                chat.UnreadCount++;
            }

            // Reorder chats
            allChats = allChats
                .OrderByDescending(c => c.UpdatedAt)
                .ToList();

            FilterChats(new ChangeEventArgs { Value = searchQuery });
        }
    }

    private void OnUserTypingReceived(int chatId, string displayName)
    {
        if (selectedChat?.ChatId == chatId)
        {
            typingUsers[chatId] = new TypingUser
            {
                DisplayName = displayName,
                StartTime = DateTime.Now
            };
            StateHasChanged();
        }
    }

    private void OnUserStoppedTyping(int chatId)
    {
        typingUsers.Remove(chatId);
        StateHasChanged();
    }

    private void HandleUserOnlineStatusChanged(string userId, bool isOnline)
    {
        // Tìm trong selectedChat.Members hoặc allChats nếu bạn lưu trạng thái online ở đó
        foreach (var chat in allChats)
        {
            var member = chat.Members.FirstOrDefault(m => m.Id == userId);
            if (member != null)
            {
                member.IsOnline = isOnline;
                // nếu server gửi lastSeen thì gán thêm member.LastSeenAt = dto.LastSeenAt
            }
        }
        InvokeAsync(() => StateHasChanged());
    }


    private void OnMessageRead(int messageId, int readBy, DateTime readAt)
    {
        // Update read status in messages
        var message = messages.FirstOrDefault(m => m.MessageId == messageId);
        if (message != null)
        {
            // Update read status logic here
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            // Phương pháp 1: Sử dụng JavaScript trực tiếp
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-container");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Scroll error: {ex.Message}");

            // Phương pháp 2: Fallback với timeout
            try
            {
                await Task.Delay(100);
                await JSRuntime.InvokeVoidAsync("scrollToBottomFallback", "chat-container");
            }
            catch
            {
                // Ignore fallback errors
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        typingTimer?.Dispose();
        await ChatService.StopConnectionAsync();
    }

    private string GetMessagePreview(MessageDto msg) =>
        msg.IsDeleted ? "[Deleted]" :
        msg.Content.Length > 30 ? msg.Content[..30] + "..." : msg.Content;

    private string GetDirectChatName(ChatDto chat) =>
        chat.Members.FirstOrDefault(m => m.Id != currentUserId)?.DisplayName ?? "Unknown";

    private string GetDirectChatInitial(ChatDto chat) =>
        GetDirectChatName(chat)?.FirstOrDefault().ToString().ToUpper() ?? "?";

    private string GetRelativeTime(DateTime dateTime)
    {
        var diff = DateTime.Now - dateTime;

        if (diff.TotalMinutes < 1)
            return "just now";
        if (diff.TotalMinutes < 60)
            return $"{(int)diff.TotalMinutes}m ago";
        if (diff.TotalHours < 24)
            return $"{(int)diff.TotalHours}h ago";
        if (diff.TotalDays < 7)
            return $"{(int)diff.TotalDays}d ago";

        return dateTime.ToString("MMM dd");
    }

    async Task ShowNewChatModal()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.False };
        var dialog = DialogService.Show<NewChatModal>("New Group", options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is CreateGroupChatRequest info)
        {
            // Xử lý kết quả
            await CreateGroupChat(info);
        }
    }

    async Task ShowProfile()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large };
        await DialogService.ShowAsync<Profile>("My Profile", options);
    }

    private async Task CreateGroupChat(CreateGroupChatRequest createGroupChatRequest)
    {
        try
        {
            var createdChat = await ChatService.CreateGroupChatAsync(createGroupChatRequest);

            allChats = await ChatService.GetUserChatsAsync();
            filteredChats = allChats;

            await SelectChat(allChats.FirstOrDefault(c => c.ChatId == createdChat.ChatId));

            Snackbar.Add("Group chat created successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create group chat: {ex.Message}", Severity.Error);
        }
    }

    // Menu action methods
    private void NavigateToProfile()
    {
        NavigationManager.NavigateTo("/profile");
    }

    private void NavigateToSettings()
    {
        NavigationManager.NavigateTo("/settings");
    }

    [Inject]
    public NavigationManager Navigation { get; set; }

    [Inject]
    SignOutSessionStateManager SignOutManager { get; set; }

    private async Task Logout()
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("/authentication/logout");
    }
}