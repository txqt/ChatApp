@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="user-search-container">
    <div class="search-box">
        <input type="text" @bind="searchTerm" @onkeyup="OnSearchKeyUp"
               placeholder="Tìm kiếm người dùng..." class="form-control" />
        <button @onclick="SearchUsers" class="btn btn-primary">
            <i class="fas fa-search"></i>
        </button>
    </div>

    @if (isLoading)
    {
        <div class="text-center mt-3">
            <div class="spinner-border" role="status">
                <span class="sr-only">Đang tìm kiếm...</span>
            </div>
        </div>
    }

    @if (searchResults.Any())
    {
        <div class="search-results mt-3">
            @foreach (var user in searchResults)
            {
                <div class="user-card">
                    <div class="user-info">
                        <img src="@(!string.IsNullOrEmpty(user.Avatar) ? user.Avatar : "/images/default-avatar.png")"
                             alt="@user.DisplayName" class="user-avatar" />
                        <div class="user-details">
                            <h6>@user.DisplayName</h6>
                            <small class="text-muted">@@@user.UserName</small>
                            <div class="user-status">
                                @if (user.IsOnline)
                                {
                                    <span class="status-online">Online</span>
                                }
                                else
                                {
                                    <span class="status-offline">Offline - @user.LastSeen?.ToString("dd/MM/yyyy HH:mm")</span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="user-actions">
                        @if (user.IsFriend)
                        {
                            <button @onclick="() => StartChat(user.Id)" class="btn btn-success btn-sm">
                                <i class="fas fa-comment"></i> Chat
                            </button>
                            <button @onclick="() => RemoveFriend(user.Id)" class="btn btn-outline-danger btn-sm">
                                <i class="fas fa-user-minus"></i>
                            </button>
                        }
                        else if (user.HasPendingRequest)
                        {
                            <span class="badge badge-warning">Đã gửi lời mời</span>
                        }
                        else
                        {
                            <button @onclick="() => SendFriendRequest(user.Id)" class="btn btn-primary btn-sm">
                                <i class="fas fa-user-plus"></i> Kết bạn
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    }
    else if (!isLoading && !string.IsNullOrEmpty(searchTerm))
    {
        <div class="no-results mt-3">
            <p class="text-muted">Không tìm thấy người dùng nào.</p>
        </div>
    }
</div>

@code {
    [Parameter] public EventCallback<int> OnStartChat { get; set; }

    private string searchTerm = "";
    private List<UserSearchDto> searchResults = new();
    private bool isLoading = false;
    private Timer? searchTimer;

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ => await InvokeAsync(SearchUsers), null, 500, Timeout.Infinite);
    }

    private async Task SearchUsers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm) || searchTerm.Length < 2)
        {
            searchResults.Clear();
            return;
        }

        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await Http.GetAsync($"api/friends/search?searchTerm={Uri.EscapeDataString(searchTerm)}");
            if (response.IsSuccessStatusCode)
            {
                searchResults = await response.Content.ReadFromJsonAsync<List<UserSearchDto>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching users: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Có lỗi xảy ra khi tìm kiếm người dùng.");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SendFriendRequest(int userId)
    {
        try
        {
            var request = new { ReceiverId = userId };
            var response = await Http.PostAsJsonAsync("api/friends/send-request", request);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Gửi lời mời kết bạn thành công!");
                await SearchUsers(); // Refresh results
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Không thể gửi lời mời kết bạn.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending friend request: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Có lỗi xảy ra khi gửi lời mời kết bạn.");
        }
    }

    private async Task RemoveFriend(int friendId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa bạn bè này?"))
        {
            try
            {
                var response = await Http.DeleteAsync($"api/friends/remove/{friendId}");
                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Đã xóa bạn bè thành công!");
                    await SearchUsers(); // Refresh results
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error removing friend: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", "Có lỗi xảy ra khi xóa bạn bè.");
            }
        }
    }

    private async Task StartChat(int userId)
    {
        await OnStartChat.InvokeAsync(userId);
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}