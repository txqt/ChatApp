@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<div class="user-search-container">
    <div class="d-flex align-center">
        <MudTextField @bind-Value="searchTerm"
                      Placeholder="Tìm kiếm người dùng..."
                      Immediate="true"
                      OnKeyUp="OnSearchKeyUp"
                      Class="w-100" T="string" />
        <MudIconButton Icon="@Icons.Material.Filled.Search"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       Size="Size.Medium"
                       OnClick="SearchUsers"
                       Disabled="@(string.IsNullOrWhiteSpace(searchTerm))" />
    </div>
    

    @if (isLoading)
    {
        <div class="text-center mt-4">
            <MudProgressCircular Indeterminate="true" Size="Size.Large" />
        </div>
    }

    @if (searchResults.Any())
    {
        <MudGrid GutterSize="3" Class="mt-4">
            @foreach (var user in searchResults)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="3" Class="d-flex justify-center">
                                    <MudAvatar Size="Size.Large"
                                               Image="@GetAvatar(user.Avatar)"
                                               Icon="@Icons.Material.Filled.Person" />
                                </MudItem>
                                <MudItem xs="9">
                                    <MudText Typo="Typo.subtitle1">@user.DisplayName</MudText>
                                    <MudText Typo="Typo.caption" Class="text-muted">
                                        @($"{user.UserName}")
                                    </MudText>
                                    <MudText Typo="Typo.body2" Class="mt-1">
                                        @if (user.IsOnline)
                                        {
                                            <MudBadge Dot="true" Color="Color.Success" Class="me-1">Online</MudBadge>
                                        }
                                        else
                                        {
                                            <MudBadge Dot="true" Color="Color.Default" Class="me-1">Offline</MudBadge>
                                            <small class="text-muted">
                                                @user.LastSeen?.ToString("dd/MM/yyyy HH:mm")
                                            </small>
                                        }
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions Class="justify-end">
                            @if (user.IsFriend)
                            {
                                <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Success"
                                           OnClick="() => StartChat(user.Id)">
                                    <MudIcon Icon="@Icons.Material.Filled.Chat" /> Chat
                                </MudButton>
                                <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Error"
                                           OnClick="() => RemoveFriend(user.Id)">
                                    <MudIcon Icon="@Icons.Material.Filled.PersonRemove" />
                                </MudButton>
                            }
                            else if (user.HasPendingRequest)
                            {
                                <MudBadge Color="Color.Warning">Đã gửi lời mời</MudBadge>
                            }
                            else
                            {
                                <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary"
                                           OnClick="() => SendFriendRequest(user.Id)">
                                    <MudIcon Icon="@Icons.Material.Filled.PersonAdd" /> Kết bạn
                                </MudButton>
                            }
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else if (!isLoading && !string.IsNullOrWhiteSpace(searchTerm))
    {
        <MudText Typo="Typo.body2" Class="text-center text-muted mt-4">
            Không tìm thấy người dùng nào.
        </MudText>
    }
</div>

@code {
    [Parameter] public EventCallback<string> OnStartChat { get; set; }

    private string searchTerm = "";
    private List<UserSearchDto> searchResults = new();
    private bool isLoading = false;
    private Timer? searchTimer;

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ => await InvokeAsync(SearchUsers), null, 500, Timeout.Infinite);
    }

    private async Task SearchUsers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm) || searchTerm.Length < 2)
        {
            searchResults.Clear();
            return;
        }

        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await Http.GetAsync($"api/friends/search?searchTerm={Uri.EscapeDataString(searchTerm)}");
            if (response.IsSuccessStatusCode)
            {
                searchResults = await response.Content.ReadFromJsonAsync<List<UserSearchDto>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error searching users: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Có lỗi xảy ra khi tìm kiếm người dùng.");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SendFriendRequest(string userId)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/friends/send-request", new { ReceiverId = userId });
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Gửi lời mời kết bạn thành công!");
                await SearchUsers();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Không thể gửi lời mời kết bạn.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error sending friend request: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Có lỗi xảy ra khi gửi lời mời kết bạn.");
        }
    }

    private async Task RemoveFriend(string friendId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa bạn bè này?"))
        {
            try
            {
                var response = await Http.DeleteAsync($"api/friends/remove/{friendId}");
                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Đã xóa bạn bè thành công!");
                    await SearchUsers();
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error removing friend: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", "Có lỗi xảy ra khi xóa bạn bè.");
            }
        }
    }

    private async Task StartChat(string userId)
    {
        await OnStartChat.InvokeAsync(userId);
    }

    private string GetAvatar(string? avatar) =>
        !string.IsNullOrEmpty(avatar) ? avatar : "/images/default-avatar.png";

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}
