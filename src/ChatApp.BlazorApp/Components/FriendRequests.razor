@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<MudTabs @bind-ActivePanelIndex="activeIndex" Rounded="false">
    <MudTabPanel Text="Lời mời kết bạn">
        <div class="mt-4"></div>
        @if (pendingRequests.Any())
        {
            <MudGrid GutterSize="3">
                @foreach (var req in pendingRequests)
                {
                    <MudItem xs="12">
                        <MudCard>
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="2" Class="d-flex justify-center">
                                        <MudAvatar Size="Size.Medium"
                                                   Image="@GetAvatar(req.RequesterAvatar)"
                                                   Icon="@Icons.Material.Filled.Person" />
                                    </MudItem>
                                    <MudItem xs="10">
                                        <MudText Typo="Typo.subtitle1">@req.RequesterDisplayName</MudText>
                                        <MudText Typo="Typo.caption" Class="text-muted">
                                            @($"@{req.RequesterName}")
                                        </MudText>
                                        <MudText Typo="Typo.body2" Class="mt-1 text-muted">
                                            @req.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                                        </MudText>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                            <MudCardActions Class="justify-end">
                                <MudButton Size="Size.Small"
                                           Variant="Variant.Filled"
                                           Color="Color.Success"
                                           OnClick="() => AcceptRequest(req.Id)">
                                    <MudIcon Icon="@Icons.Material.Filled.Check" /> Chấp nhận
                                </MudButton>
                                <MudButton Size="Size.Small"
                                           Variant="Variant.Outlined"
                                           Color="Color.Error"
                                           OnClick="() => DeclineRequest(req.Id)">
                                    <MudIcon Icon="@Icons.Material.Filled.Close" /> Từ chối
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudText Typo="Typo.body2" Class="text-center text-muted">
                Không có lời mời kết bạn nào.
            </MudText>
        }
    </MudTabPanel>
    <MudTabPanel Text="Lời mời đã gửi">
        <div class="mt-4"></div>
        @if (sentRequests.Any())
        {
            <MudGrid GutterSize="3">
                @foreach (var req in sentRequests)
                {
                    <MudItem xs="12">
                        <MudCard>
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="2" Class="d-flex justify-center">
                                        <MudAvatar Size="Size.Medium"
                                                   Image="@GetAvatar(req.RequesterAvatar)"
                                                   Icon="@Icons.Material.Filled.Person" />
                                    </MudItem>
                                    <MudItem xs="10">
                                        <MudText Typo="Typo.subtitle1">@req.RequesterDisplayName</MudText>
                                        <MudText Typo="Typo.caption" Class="text-muted">
                                            @($"@{req.RequesterName}")
                                        </MudText>
                                        <MudText Typo="Typo.body2" Class="mt-1 text-muted">
                                            Đã gửi: @req.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                                        </MudText>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                            <MudCardActions Class="justify-end">
                                <MudBadge Color="Color.Warning">Đang chờ</MudBadge>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudText Typo="Typo.body2" Class="text-center text-muted">
                Bạn chưa gửi lời mời kết bạn nào.
            </MudText>
        }
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter] public EventCallback OnRequestsChanged { get; set; }

    private int activeIndex = 0;
    private List<FriendRequestDto> pendingRequests = new();
    private List<FriendRequestDto> sentRequests = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadRequests();
    }

    private async Task LoadRequests()
    {
        try
        {
            var pendingResponse = await Http.GetAsync("api/friends/requests/pending");
            if (pendingResponse.IsSuccessStatusCode)
                pendingRequests = await pendingResponse.Content.ReadFromJsonAsync<List<FriendRequestDto>>() ?? new();

            var sentResponse = await Http.GetAsync("api/friends/requests/sent");
            if (sentResponse.IsSuccessStatusCode)
                sentRequests = await sentResponse.Content.ReadFromJsonAsync<List<FriendRequestDto>>() ?? new();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading friend requests: {ex.Message}");
        }
    }

    private async Task AcceptRequest(string requestId)
    {
        if (await Http.PostAsync($"api/friends/accept-request/{requestId}", null)
                      .ContinueWith(t => t.Result.IsSuccessStatusCode))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Đã chấp nhận lời mời kết bạn!");
            await LoadRequests();
            await OnRequestsChanged.InvokeAsync();
        }
    }

    private async Task DeclineRequest(string requestId)
    {
        if (await Http.PostAsync($"api/friends/decline-request/{requestId}", null)
                      .ContinueWith(t => t.Result.IsSuccessStatusCode))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Đã từ chối lời mời kết bạn!");
            await LoadRequests();
            await OnRequestsChanged.InvokeAsync();
        }
    }

    private string GetAvatar(string? url) =>
        !string.IsNullOrEmpty(url) ? url : "/images/default-avatar.png";

    public async Task RefreshRequests()
    {
        await LoadRequests();
    }
}
