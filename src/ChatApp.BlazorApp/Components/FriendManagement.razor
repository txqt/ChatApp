@page "/friends"
@inject IJSRuntime JSRuntime
@inject IChatService ChatService
@inject NavigationManager NavigationManager
@using MudBlazor

<PageTitle>Quản lý bạn bè</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">
    <MudIcon Icon="@Icons.Material.Filled.PersonAdd" /> Quản lý bạn bè
</MudText>

<MudTabs @bind-ActivePanelIndex="activeIndex" Rounded="false">
    <MudTabPanel Text="Tìm kiếm">
        <MudCard Class="mt-4">
            <MudCardHeader>
                <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Search" /> Tìm kiếm người dùng</MudText>
            </MudCardHeader>
            <MudCardContent>
                <UserSearch OnStartChat="HandleStartChat" />
            </MudCardContent>
        </MudCard>
    </MudTabPanel>
    <MudTabPanel Text="Kết bạn">
        <MudCard Class="mt-4">
            <MudCardContent>
                <FriendRequests @ref="friendRequestsComponent" OnRequestsChanged="HandleRequestsChanged" />
            </MudCardContent>
        </MudCard>
    </MudTabPanel>
    <MudTabPanel Text="Bạn bè">
        <MudCard Class="mt-4">
            <MudCardContent>
                <FriendsList @ref="friendsListComponent"
                             OnStartChat="HandleStartChat"
                             OnFriendsChanged="HandleFriendsChanged" />
            </MudCardContent>
        </MudCard>
    </MudTabPanel>
</MudTabs>

@code {
    private int activeIndex = 2;
    private int pendingRequestsCount = 0;
    private int friendsCount = 0;

    private FriendRequests? friendRequestsComponent;
    private FriendsList? friendsListComponent;

    protected override async Task OnInitializedAsync()
    {
        await LoadCounts();
    }

    private async Task HandleStartChat(string userId)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Bắt đầu chat với user ID: {userId}");
        await ChatService.CreateDirectChatAsync(userId);
        NavigationManager.NavigateTo("/chat", true);
    }

    private async Task HandleRequestsChanged()
    {
        await LoadCounts();
        if (friendsListComponent != null)
            await friendsListComponent.RefreshFriends();
    }

    private async Task HandleFriendsChanged()
    {
        await LoadCounts();
        if (friendRequestsComponent != null)
            await friendRequestsComponent.RefreshRequests();
    }

    private async Task LoadCounts()
    {
        pendingRequestsCount = 0;
        friendsCount = 0;
        StateHasChanged();
    }

    [Parameter] public EventCallback<string>? OnStartChat { get; set; }
}
